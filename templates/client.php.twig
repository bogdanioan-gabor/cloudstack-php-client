{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Pleplé <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}
{% autoescape false %}
<?php{% if config.namespace != '' %} namespace {{ config.namespace }};{% endif %}

/*
 * This file was autogenerated as part of the CloudStack PHP Client.
 *
 * Date Generated: {{ config.now.format('Y-m-d') }}
 * API Version: {{ capabilities.capability.cloudstackversion }}
 *
 * (c) Quentin Pleplé {{ '<quentin.pleple@gmail.com>'|raw }}
 * (c) Aaron Hurt {{ '<ahurt@anbcs.com>'|raw }}
 * (c) Nathan Johnson {{ '<nathan@nathanjohnson.org>'|raw }}
 * (c) Daniel Carbone {{ '<daniel.p.carbone@gmail.com>'|raw }}
 * (c) Bogdan Gabor {{ '<bgabor@ena.com>'|raw }}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * CloudStackClient class
 */
class CloudStackClient {

    /** @var CloudStackConfiguration */
    protected $configuration;

    /**
     * CloudStackClient constructor
     *
     * @param CloudStackConfiguration $configuration
     */
    public function __construct(CloudStackConfiguration $configuration)
    {
        $this->configuration = $configuration;
    }

{% for api in apis %}
{% include "method.php.twig" with {'api' : api, 'config' : config} %}

{% endfor %}

    /**
     * Will wait until either $tries threshold is met or async job completes, successful or otherwise.
     *
     * @param Response\AsyncJobStartResponse $startResponse
     * @param int $sleep
     * @param int $tries
     * @return null|object
     * @throws \InvalidArgumentException
     */
    public function waitForAsync(Response\AsyncJobStartResponse $startResponse, $sleep = 2, $tries = 120)
    {
        // Some basic validation
        if (!is_int($sleep) || 0 >= $sleep)
        {
            throw new \InvalidArgumentException(sprintf(
                '%s::waitForAsyncResponse - $sleep must be positive integer, %s seen.',
                get_class($this),
                is_int($sleep) ? $sleep : gettype($sleep)
            ));
        }

        if (!is_int($tries) || (-1 > $tries || 0 === $tries)) {
            throw new \InvalidArgumentException(sprintf(
                '%s:waitForAsyncResponse - $tries must be positive integer or -1 for infinite, %s seen.',
                get_class($this),
                is_int($tries) ? $tries : gettype($tries)
            ));
        }

        $wait = function() use ($sleep) { sleep($sleep); };

        $attempts = 0;
        while(true)
        {
            $result = $this->queryAsyncJobResult($startResponse->jobid);

            if (2 === $result->jobstatus || 2 === $result->jobprocstatus)
                throw new \RuntimeException($result->jobresult['errortext'], $result->jobresult['errorcode']);

            if (0 === $result->jobstatus)
            {
                if (-1 !== $tries && $attempts > $tries)
                    return null;

                $wait();
            }
            else
            {
                $resultData = $result->jobresult;
                if (0 < count($resultData))
                {
                    $class = $startResponse->getResponseClassName();
                    return new $class(reset($resultData));
                }

                return null;
            }
        }

        return null;
    }

    /**
     * @param \Psr\Http\Message\RequestInterface $req
     * @return \Psr\Http\Message\ResponseInterface
     * @throws \RuntimeException
     */
    protected function doRequest(RequestInterface $req)
    {
        $resp = $this->configuration->HttpClient->sendRequest($req);

        if (200 !== $resp->getStatusCode())
            throw new \RuntimeException(NO_VALID_JSON_RECEIVED_MSG, NO_VALID_JSON_RECEIVED);

        return $resp;
    }

    /**
     * @param \Psr\Http\Message\ResponseInterface $resp
     * @param string $command
     * @return array
     * @throws \RuntimeException
     */
    protected function decodeBody(ResponseInterface $resp, $command)
    {
        $body = $resp->getBody();

        if (0 === $body->getSize())
            throw new \RuntimeException(NO_DATA_RECEIVED_MSG, NO_DATA_RECEIVED);

        $data = '';
        while (!$body->eof() && $b = $body->read(8192))
        {
            $data .= $b;
        }

        $decoded = @json_decode($data, true);
        if (JSON_ERROR_NONE !== json_last_error())
            throw new \RuntimeException(NO_VALID_JSON_RECEIVED_MSG, NO_VALID_JSON_RECEIVED);

        /* standard presentation of errors */
        if (isset($decoded['errorresponse']) && isset($decoded['errorresponse']['errortext']))
            throw new \RuntimeException($decoded['errorresponse']['errortext']);

        $lowerCmd = strtolower($command);
        $propertyResponse = sprintf('%sresponse', $lowerCmd);

        if (!isset($decoded[$propertyResponse])) {
            /* some commands drop the trailing 's' in the response: listPools becomes 'listpoolresponse' */
            $propertyResponse = sprintf('%sresponse', substr(strtolower($command), 0, -1));
            if (!isset($decoded[$propertyResponse])) {
                throw new \RuntimeException(sprintf(
                    'Unable to parse the response. Got code %d and message: %s',
                    $resp->getStatusCode(),
                    $data
                ));
            }
        }

        $responseData = $decoded[$propertyResponse];

        if (0 === strpos($lowerCmd, 'list'))
        {
            $objectName = substr($lowerCmd, 4);
            if (isset($responseData[$objectName])) {
                $resultArray = $responseData[$objectName];
                if (is_array($resultArray)) {
                    return $resultArray;
                }
            } else {
                /* sometimes, the 's' is kept, as in :
                   { "listasyncjobsresponse" : { "asyncjobs" : [ ... ] } } */
                $objectName .= 's';
                if (isset($responseData[$objectName])) {
                    $resultArray = $responseData[$objectName];
                    if (is_array($resultArray)) {
                        return $resultArray;
                    }
                }
            }
        }

        return $responseData;
    }
}
{% endautoescape %}