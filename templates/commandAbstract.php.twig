{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Pleplé <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}
{% autoescape false %}
<?php{% if config.namespace != '' %} namespace {{ config.namespace }};{% endif %}

/*
 * This file was autogenerated as part of the CloudStack PHP Client.
 *
 * Date Generated: {{ config.now.format('Y-m-d') }}
 * API Version: {{ capabilities.capability.cloudstackversion }}
 *
 * (c) Quentin Pleplé {{ '<quentin.pleple@gmail.com>'|raw }}
 * (c) Aaron Hurt {{ '<ahurt@anbcs.com>'|raw }}
 * (c) Nathan Johnson {{ '<nathan@nathanjohnson.org>'|raw }}
 * (c) Daniel Carbone {{ '<daniel.p.carbone@gmail.com>'|raw }}
 * (c) Bogdan Gabor {{ '<bgabor@ena.com>'|raw }}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Uri;

/**
 * CloudStackCommandAbstract Class
 * @package {% if config.namespace != '' %}\{{ config.namespace }}{% endif %}
 */
abstract class CloudStackCommandAbstract {

    /** @var \{% if config.namespace != '' %}{{ config.namespace }}\{% endif %}CloudStackConfiguration */
    private $configuration;

    /**
     * Name of command itself
     * @var string
     */
    private $command;

    /**
     * Map of parameters to pass to CloudStack
     * @var array
     */
    private $parameters = [];

    /**
     * Tracks whether we need to rebuild compiledParameters or not
     * @var bool
     */
    private $parametersModified = false;

    /**
     * Map of key-sorted parameters with "command" key added
     * @var array
     */
    private $compiledParameters = [];

    /**
     * Ready-to-execute representation of command
     * @var string
     */
    private $compiledQuery = '';

    /**
     * CloudStackCommandAbstract Constructor
     * @var \{% if config.namespace != '' %}{{ config.namespace }}\{% endif %}CloudStackConfiguration $configuration
     * @var string $command
     * @var array $parameters
     */
    public function __construct(CloudStackConfiguration $configuration, $command, array $parameters = []) {
        $this->configuration = $configuration;

        if (!is_string($command)) {
            throw new \InvalidArgumentException(sprintf(WRONG_ARGUMENT_TYPE_MSG, 'command', 'string', gettype($command)), WRONG_ARGUMENT_TYPE);
        }

        $this->command = trim((string)$command);

        if ('' === $this->command) {
            throw new \InvalidArgumentException(sprintf(WRONG_ARGUMENT_TYPE_MSG, 'command', 'non-empty string', ''), WRONG_ARGUMENT_TYPE);
        }

        foreach($parameters as $k => $v) {
            $this->setParameter($k, $v);
        }
    }

    /**
     * Set a parameter on this command
     *
     * @param string $param
     * @param mixed $value
     * @throws \InvalidArgumentException
     */
    public function setParameter($param, $value) {
        // if we see a null or empty string value, move on...
        if (null === $value) {
            return;
        }

        $param = str_replace(["\n", "\r", ' ', "\t", "\0", "\x0B"], '', strtolower($param));
        if ('' === $param) {
            throw new \InvalidArgumentException(sprintf(WRONG_ARGUMENT_TYPE_MSG, 'param', 'non-empty string', ''), WRONG_ARGUMENT_TYPE);
        }

        $valueType = gettype($value);

        if ('array' === $valueType) {
            foreach(CloudStackHelpers::formatCSQueryArray($value, $param) as $k => $v) {
                $this->setParameter($k, $v);
            }
        } else if ('object' === $valueType) {
            foreach(CloudStackHelpers::formatCSQueryArray(json_decode(json_encode($value), true), $param) as $k => $v) {
                $this->setParameter($k, $v);
            }
        } else if ('string' === $valueType) {
            $this->parameters[$param] = $value;
        } else if ('integer' === $valueType || 'double' === $valueType) {
            $this->parameters[$param] = (string)$value;
        } else if ('boolean' === $valueType) {
            $this->parameters[$param] = $value ? 'true' : 'false';
        } else {
            throw new \InvalidArgumentException(sprintf(
                WRONG_ARGUMENT_TYPE_MSG,
                $param,
                'scalar type, array, or \\stdClass object',
                $valueType
            ), WRONG_ARGUMENT_TYPE);
        }

        if (!$this->parametersModified) {
            $this->compiledQuery = '';
            $this->parametersModified = true;
        }
    }

    /**
     * @return \{% if config.namespace != '' %}{{ config.namespace }}\{% endif %}CloudStackConfiguration
     */
    public function getConfiguration() {
        return $this->configuration;
    }

    /**
     * @return string
     */
    abstract public function getKey();

    /**
     * @return string
     */
    abstract public function getPath();

    /**
     * @return string
     */
    public function getCommand() {
        return $this->command;
    }

    /**
     * @return array
     */
    public function getParameters() {
        if ($this->parametersModified) {
            $this->compiledParameters = [
                'apikey' => $this->configuration->getApiKey(),
                $this->getKey() => $this->getCommand(),
                'response' => 'json',
            ] + $this->parameters;
            ksort($this->compiledParameters);
            $this->parametersModified = false;
        }

        return $this->compiledParameters;
    }

    /**
     * @return string
     */
    public function getCompiledQuery() {
        if ('' === $this->compiledQuery) {
            $query = http_build_query($this->getParameters());
            $this->compiledQuery = sprintf(
                '%s&signature=%s',
                $this->encodeQueryForRequest($query),
                $this->configuration->buildSignature($this->encodeQueryForSignature($query))
            );
        }

        return $this->compiledQuery;
    }

    /**
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPsr7Request() {
        static $headers = ['Accept' => ['application/json'], 'Content-Type' => ['application/x-www-form-urlencoded']];

        $stream = fopen('php://memory', 'w+');
        fwrite($stream, $this->getCompiledQuery());

        return new Request(
            'POST',
            new Uri(sprintf('%s/%s', $this->configuration->getCompiledAddress(), $this->getPath())),
            $headers,
            $stream
        );
    }

    /**
     * @return string
     */
    public function __toString() {
        return $this->getCompiledQuery();
    }

    /**
     * @param string $query
     * @return string
     */
    private function encodeQueryForRequest($query) {
        static $search = ['+'];
        static $replace = ['%20'];

        return str_replace($search, $replace, $query);
    }

    /**
     * @param string $query
     * @return string
     */
    private function encodeQueryForSignature($query) {
        static $search = ['+', '%5B', '%5D'];
        static $replace = ['%20', '[', ']'];

        return str_replace($search, $replace, $query);
    }
}
{% endautoescape %}