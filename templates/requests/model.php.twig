{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Pleplé <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}{% spaceless %}
{% set params = api.parameters %}
{% set requiredParams = params.required %}
{% set optionalParams = params.optional %}
{% set requiredParamLength = requiredParams|length %}
{% set optionalParamLength = optionalParams|length %}
{% endspaceless %}
{% autoescape false %}
<?php namespace {% if config.namespace != '' %}{{ config.namespace }}\{% endif %}CloudStackRequest;

/*
 * This file was autogenerated as part of the CloudStack PHP Client.
 *
 * Date Generated: {{ config.now.format('Y-m-d') }}
 * API Version: {{ capabilities.capability.cloudstackversion }}
 *
 * (c) Quentin Pleplé {{ '<quentin.pleple@gmail.com>'|raw }}
 * (c) Aaron Hurt {{ '<ahurt@anbcs.com>'|raw }}
 * (c) Nathan Johnson {{ '<nathan@nathanjohnson.org>'|raw }}
 * (c) Daniel Carbone {{ '<daniel.p.carbone@gmail.com>'|raw }}
 * (c) Bogdan Gabor {{ '<bgabor@ena.com>'|raw }}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Class {{ api.requestClassname }}
{{ api.sinceTag(0) }} * @package \{% if config.namespace != '' %}{{ config.namespace }}\{% endif %}CloudStackRequest
 * @SWG\Definition(definition="{{ api.requestClassname }}")
 */
class {{ api.requestClassname }} implements CloudStackRequestInterface, CloudStackApiCommandRequest{% if api.isList %}, CloudStackListRequest{% endif %}{% if api.isAsync %}, CloudStackAsynchronousRequest{% endif %} {

{% for prop in api.parameters %}
{{ prop.propertyDocBloc }}
    private ${{ prop.name }};

{% endfor %}
    /**
     * {{ api.requestClassname }} Constructor
{% for param in requiredParams %}
     * @param {{ param.PHPTypeTagValue }} ${{ param.name }} {{ param.description|raw|ucfirst }}
{% endfor %}
{% if optionalParamLength > 0 %}
     * @param array $optArgs {
{# document all optional paramaters #}
{% for param in optionalParams %}
     *     @type {{ param.PHPTypeTagValue }} ${{ param.name }} {{ param.description|raw|ucfirst }}
{% endfor %}
{# end optional arguments #}
     * }
{% endif %}
     */
    public function __construct ({% for param in requiredParams %}{{ loop.index0 > 0 ? ', ' : '' }}${{ param.name }}{% endfor %}
{# end required #}
{# append optional arguments if needed #}
{% if optionalParamLength > 0 %}{% if requiredParamLength > 0 %}, {% endif %}array $optArgs = []{% endif %}) {
{% for param in requiredParams %}
        $this->set{{ param.name|capitalize }}(${{ param.name }});
{% endfor %}{% if 0 != optionalParamLength %}
        foreach($optArgs as $k => $v) {
            $this->{'set'.ucfirst($k)}($v);
        }
{% endif %}
    }

    /**
     * @param array $data
     * @return \{% if config.namespace != '' %}{{ config.namespace }}\{% endif %}CloudStackRequest\{{ api.requestClassname }}
     */
    public static function fromArray(array $data) {
{% if 0 == requiredParamLength %}{# this object only contains optional parameters #}
        return new static($data);
{% else %}{% for param in requiredParams %}
        if (isset($data['{{ param.name }}'])) {
            ${{ param.name }} = $data['{{ param.name }}'];
            unset($data['{{ param.name }}']);
        } else {
            throw new \DomainException('{{ api.requestClassname }}::fromArray - Required parameter "{{ param.name }}" not found in $data.');
        }

{% endfor %}
        $n = new static({% for param in requiredParams %}{{ loop.index0 > 0 ? ', ' : '' }}
            ${{ param.name }}{% endfor %}{% if optionalParamLength > 0 %}{% if requiredParamLength > 0 %},
{% endif %}
            $data{% endif %}

        );

        return $n;
{% endif %}
    }

{% for prop in api.parameters %}
    /**
{{ prop.phpdocDescription }}
     * @return {{ prop.phpTypeTagValue }}
     */
    public function get{{ prop.name|capitalize }}() {
        return $this->{{ prop.name }};
    }

    /**
{{ prop.phpdocDescription }}
     * @param {{ prop.phpTypeTagValue }} ${{ prop.name }}
     * @return $this
     */
    public function set{{ prop.name|capitalize }}({% if 'array' == prop.phpType %}array {% endif %}${{ prop.name }}) {
{% if 'tags' == prop.name %}
        foreach(${{ prop.name }} as $k => $v) {
            $this->addTag($k, $v);
        }
{% else %}
        $this->{{ prop.name }} = ${{ prop.name }};
{% endif %}
        return $this;
    }

{% if 'tags' == prop.name %}
    /**
     * @param string $value
     * @param string $value
     * @return $this
     */
    public function addTag($key, $value) {
        $this->tags[] = ['key' => $key, 'value' => $value];
        return $this;
    }
{% endif %}
{% endfor %}
    /**
     * @return string
     */
    public function getCloudStackCommandParameter() {
        return 'command';
    }

    /**
     * @return string
     */
    public function getCloudStackCommandName() {
        return '{{ api.name }}';
    }

    /**
     * @return string
     */
    public function getCloudStackResponseModel() {
        return '{{ api.response.FQName|replace({"\\": "\\\\"}) }}';
    }

    /**
     * @return bool
     */
    public function isRequestValid() {
{% if 0 == requiredParamLength %}
        // all parameters are optional
        return true;{% else %}
        return isset($this->{{ requiredParams|keys|join(")\n            && isset($this->") }});{% endif %}

    }

    /**
     * @return array
     */
    public function jsonSerialize() {
        $a = [];
{% for prop in requiredParams %}
        if (isset($this->{{ prop.name }})) {
            $a['{{ prop.name }}'] = $this->{{ prop.name }};
        }
{% endfor %}{% for prop in optionalParams %}
        if (isset($this->{{ prop.name }})) {
            $a['{{ prop.name }}'] = $this->{{ prop.name }};
        }
{% endfor %}
        return $a;
    }
}
{% endautoescape %}